/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelTXpowerSelector.java
 *
 * Created on Apr 3, 2011, 11:59:13 PM
 */

package rssi_graph.localization;

import java.awt.event.ItemEvent;
import java.util.HashSet;
import java.util.Set;
import rssi_graph.NodeSelectedEvent;
import rssi_graph.NodeSelectionChangedListener;
import rssi_graph.nodeRegister.GenericNode;
import rssi_graph.nodeRegister.NodePlatform;
import rssi_graph.nodeRegister.NodePlatformGeneric;
import rssi_graph.nodeRegister.NodeRegister;
import rssi_graph.utils.TableHelper;
import rssi_graph.utils.TableMyAbstractTableModel;

/**
 *
 * @author ph4r05
 */
public class JPanelTXpowerSelector extends javax.swing.JPanel implements NodeSelectionChangedListener {

    /**
     * Current platform selected.
     * Not to refresh whole table (which cause selection reset) if node of 
     * same platform selected.
     */
    private int curPlatform=-1;
    
    
    public static final int SELECT_SINGLE=javax.swing.ListSelectionModel.SINGLE_SELECTION;
    public static final int SELECT_MULTIPLE=javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION;
    
    /** Creates new form JPanelTXpowerSelector */
    public JPanelTXpowerSelector() {
        initComponents();
    }
    
    public void setSelectionMode(int mode){
        this.jTableTXPower.setSelectionMode(mode);
    }

    /**
     * returns wanted TX power
     * @return
     */
    public int[] getWantedTx(){
        int[] sel = TableHelper.getSelectedRows(jTableTXPower, true);
        if (sel==null) return new int[0];
        
        int[] result = new int[sel.length];
        for(int i=0; i<sel.length; i++){
            result[i] = (Integer)this.jTableTXPower.getModel().getValueAt(sel[i], 0);
        }

        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButtonInvert = new javax.swing.JButton();
        jToggleAll = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTXPower = new javax.swing.JTable();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(rssi_graph.RSSI_graphApp.class).getContext().getResourceMap(JPanelTXpowerSelector.class);
        jButtonInvert.setText(resourceMap.getString("jButtonInvert.text")); // NOI18N
        jButtonInvert.setName("jButtonInvert"); // NOI18N
        jButtonInvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInvertActionPerformed(evt);
            }
        });

        jToggleAll.setText(resourceMap.getString("jToggleAll.text")); // NOI18N
        jToggleAll.setName("jToggleAll"); // NOI18N
        jToggleAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleAllItemStateChanged(evt);
            }
        });

        setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("Form.border.title"))); // NOI18N
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTableTXPower.setAutoCreateRowSorter(true);
        jTableTXPower.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {new Integer(31), new Integer(0)},
                {new Integer(27), new Integer(-1)},
                {new Integer(23), new Integer(-3)},
                {new Integer(19), new Integer(-5)},
                {new Integer(15), new Integer(-7)},
                {new Integer(11), new Integer(-10)},
                {new Integer(7), new Integer(-15)},
                {new Integer(3), new Integer(-25)}
            },
            new String [] {
                "TX level", "OPower"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableTXPower.setName("jTableTXPower"); // NOI18N
        jScrollPane1.setViewportView(jTableTXPower);
        jTableTXPower.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTableTXPower.columnModel.title1")); // NOI18N
        jTableTXPower.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTableTXPower.columnModel.title2")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
//
//    /**
//     * Inverts selected channels
//     * @param evt
//     */
    private void jButtonInvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInvertActionPerformed
        // get table selection
        int[] selected = TableHelper.getSelectedRows(jTableTXPower, false);

        // preprocess
        boolean[] selectedMap = new boolean[this.jTableTXPower.getRowCount()];
        for(int i=0; i<selectedMap.length; i++){
            selectedMap[i]=false;
        }

        if (selected!=null){
            for(int i=0; i<selected.length; i++){
                selectedMap[selected[i]]=true;
            }
        }
        
        // invert selection
        this.jTableTXPower.clearSelection();
        for(int i=0, cnI=this.jTableTXPower.getRowCount(); i<cnI; i++){
            int trIndex = i;//this.jTableTXPower.convertRowIndexToModel(i);
            if (selectedMap[i]==false){
                this.jTableTXPower.addRowSelectionInterval(i, i);
            }
        }
    }//GEN-LAST:event_jButtonInvertActionPerformed

    private void jToggleAllItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleAllItemStateChanged
        // TODO add your handling code here:
        if(this.jTableTXPower.getRowCount()==0) return;
        if (evt.getStateChange() == ItemEvent.SELECTED){
            // select all channels
            this.jTableTXPower.setRowSelectionInterval(0, this.jTableTXPower.getRowCount()-1);
        }
        else{
            this.jTableTXPower.clearSelection();
        }
    }//GEN-LAST:event_jToggleAllItemStateChanged

    /**
     * =========================================================================
     *
     * TABLE MODELS
     *
     * =========================================================================
     */

    class TXTableModel extends TableMyAbstractTableModel {
        public TXTableModel() {
            this.columnNames = new String[] {"TX level", "OPower"};
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }

        @Override
        public Class getColumnClass(int c) {
            if (c==0) return Integer.class;
            else return Double.class;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonInvert;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableTXPower;
    private javax.swing.JToggleButton jToggleAll;
    // End of variables declaration//GEN-END:variables

    /**
     * Accept event about currently changed nodes
     * @param evt 
     */
    public void nodeChanged(NodeSelectedEvent evt) {
        if (evt.selectedNodes == null || evt.selectedNodes.length==0){
            this.jTableTXPower.setEnabled(false);
            return;
        }
        
        // node register
        NodeRegister nodeRegister = rssi_graph.RSSI_graphApp.sGetNodeRegister();
        if (nodeRegister==null) return;
        
        // get platform of node, shoud be same
        Set<NodePlatform> platforms=new HashSet<NodePlatform>();
        for(int i=0, cnI=evt.selectedNodes.length; i<cnI; i++){
            if (nodeRegister.existsNode(evt.selectedNodes[i])==false) continue;
            GenericNode node=nodeRegister.getNode(evt.selectedNodes[i]);
            
            if (node.getPlatform()==null) continue;
            NodePlatform nf = node.getPlatform();
            platforms.add(nf);
            
            // multiple platforms selected, cannot set tx power
            if (platforms.size()>1) {
                this.jTableTXPower.setEnabled(false);
                TXTableModel model = new TXTableModel();
                this.jTableTXPower.setModel(model);
                this.curPlatform=-1;
                return;
            }
        }
        
        if (platforms.isEmpty()) return;
        this.jTableTXPower.setEnabled(true);
        
        // set tx data according to platform
        TXTableModel model = new TXTableModel();
        NodePlatform nf = (NodePlatform) platforms.iterator().next();
        
        // same platform?
        if (nf.getPlatformId()==curPlatform) return;
        curPlatform = nf.getPlatformId();
        
        int[] txLevels = nf.getTxLevels();
        double[] txOutput = nf.getTxOutputPower();
        Object[][] data = new Object[txLevels.length][2];
        
        for(int i=0, cnI=txLevels.length; i<cnI; i++){
            data[i][0] = Integer.valueOf(txLevels[i]);
            data[i][1] = (txOutput.length) <= i ? Double.valueOf(0.0) : Double.valueOf(txOutput[i]);
        }
        
        model.setData(data);
        this.jTableTXPower.setModel(model);
    }
}
