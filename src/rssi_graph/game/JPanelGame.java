/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelGame.java
 *
 * Created on Sep 15, 2011, 1:44:50 PM
 */
package rssi_graph.game;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Set;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import rssi_graph.RSSI_graphApp;

/**
 *
 * @author ph4r05
 */
public class JPanelGame extends javax.swing.JPanel {

    protected GameWorker gameWorker = null;
    protected Set<Integer> mobileNodes = null;
    
    /** Creates new form JPanelGame */
    public JPanelGame() {
        initComponents();
    }
    
    public void initThis(){
        
    }
    
    /**
     * refresh combo boxes node choosers
     */
    public void refreshMobileNodes(int updateCombo){
        // currently selected
        System.err.println("newExec " + updateCombo);
        String oldSelection1 = (String) this.jComboPlayer1Node.getSelectedItem();
        String oldSelection2 = (String) this.jComboPlayer2Node.getSelectedItem();
        Integer selected1 = null;
        Integer selected2 = null;
        
        if (oldSelection1!=null && !("NONE".equalsIgnoreCase(oldSelection1)) 
            && mobileNodes.contains(Integer.valueOf(oldSelection1))){
            selected1 = Integer.valueOf(oldSelection1);
        }
        
         if (oldSelection2!=null && !("NONE".equalsIgnoreCase(oldSelection2)) 
            && mobileNodes.contains(Integer.valueOf(oldSelection2))){
            selected2 = Integer.valueOf(oldSelection2);
        }
        
        
        // assume size+1 = default is none
        int size = mobileNodes.size();
        Object[] modelData1 = new Object[selected2 != null ? size : size+1];
        modelData1[0] = "NONE";
        Object[] modelData2 = new Object[selected1 != null ? size : size+1];
        modelData2[0] = "NONE";
        
        // sort increasingly
        ArrayList<Integer> alist = new ArrayList<Integer>(mobileNodes);
        Collections.sort(alist);
        
        Iterator<Integer> iterator = alist.iterator();
        for(int i1=1,i2=1; iterator.hasNext(); ){
            Integer curNode = iterator.next();
            
            // fill data for first model
            if (!curNode.equals(selected2)){
                modelData1[i1++] = String.valueOf(curNode);
            }
            
            // fill data for second model
            if (!curNode.equals(selected1)){
                modelData2[i2++] = String.valueOf(curNode);
            }
        }
        
        // create new combo box model
        ComboBoxModel model1 = new DefaultComboBoxModel(modelData1);
        ComboBoxModel model2 = new DefaultComboBoxModel(modelData2);
        if ((updateCombo & 1)>0){
            this.jComboPlayer1Node.setModel(model1);
            // selection, if found
            if (selected1!=null 
                    && oldSelection1!=null
                    && ! oldSelection1.equals(this.jComboPlayer1Node.getSelectedItem())){
                this.jComboPlayer1Node.getModel().setSelectedItem(oldSelection1);
            }
        }
        
        if ((updateCombo & 2)>0){
            this.jComboPlayer2Node.setModel(model2);
            if (selected2!=null 
                    && oldSelection2!=null
                    && ! oldSelection2.equals(this.jComboPlayer2Node.getSelectedItem())){
                this.jComboPlayer2Node.getModel().setSelectedItem(oldSelection2);
            }
        }
    }
    
    /**
     * Load mobile nodes to combo boxes.
     */
    public void setMobileNodes(Set<Integer> mobileNodes){
        // copy localy
        this.mobileNodes = mobileNodes;
        this.refreshMobileNodes(3);
    }
    
    public String GetPlayerName(int player){
        return player==1 ? this.jTextPlayer1Name.getText() : this.jTextPlayer2Name.getText();
    }
    
    public String GetPlayerNode(int player){
        return (String) (player==1 ? this.jComboPlayer1Node.getSelectedItem() : this.jComboPlayer2Node.getSelectedItem());
    }
    
    public GameWorker getGameWorker() {
        return gameWorker;
    }

    public void setGameWorker(GameWorker gameWorker) {
        this.gameWorker = gameWorker;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboPlayer1Node = new javax.swing.JComboBox();
        jComboPlayer2Node = new javax.swing.JComboBox();
        jTextPlayer1Name = new javax.swing.JTextField();
        jTextPlayer2Name = new javax.swing.JTextField();
        jButtonSubmitPlayerSettings = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(rssi_graph.RSSI_graphApp.class).getContext().getResourceMap(JPanelGame.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jComboPlayer1Node.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NONE" }));
        jComboPlayer1Node.setName("jComboPlayer1Node"); // NOI18N
        jComboPlayer1Node.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboPlayer1NodeActionPerformed(evt);
            }
        });

        jComboPlayer2Node.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NONE" }));
        jComboPlayer2Node.setName("jComboPlayer2Node"); // NOI18N
        jComboPlayer2Node.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboPlayer2NodeActionPerformed(evt);
            }
        });

        jTextPlayer1Name.setText(resourceMap.getString("jTextPlayer1Name.text")); // NOI18N
        jTextPlayer1Name.setName("jTextPlayer1Name"); // NOI18N

        jTextPlayer2Name.setText(resourceMap.getString("jTextPlayer2Name.text")); // NOI18N
        jTextPlayer2Name.setName("jTextPlayer2Name"); // NOI18N

        jButtonSubmitPlayerSettings.setText(resourceMap.getString("jButtonSubmitPlayerSettings.text")); // NOI18N
        jButtonSubmitPlayerSettings.setName("jButtonSubmitPlayerSettings"); // NOI18N
        jButtonSubmitPlayerSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitPlayerSettingsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jTextPlayer1Name, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jComboPlayer1Node, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButtonSubmitPlayerSettings)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jComboPlayer2Node, javax.swing.GroupLayout.Alignment.TRAILING, 0, 150, Short.MAX_VALUE)
                    .addComponent(jTextPlayer2Name, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextPlayer1Name, jTextPlayer2Name});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboPlayer1Node, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboPlayer2Node, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextPlayer1Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextPlayer2Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSubmitPlayerSettings))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(164, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Submitted player settings
     * 
     * @param evt 
     */
    private void jButtonSubmitPlayerSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitPlayerSettingsActionPerformed
        if (this.gameWorker instanceof GameWorker){
            // sanitize form, first player cannot be NONE when second player is set
            String playerNode1 = this.GetPlayerNode(1);
            String playerNode2 = this.GetPlayerNode(2);
            if ("NONE".equalsIgnoreCase(playerNode1) && !("NONE".equalsIgnoreCase(playerNode2))){
                // swap users here
                ComboBoxModel model = this.jComboPlayer2Node.getModel();
                this.jComboPlayer2Node.setModel(this.jComboPlayer1Node.getModel());
                this.jComboPlayer1Node.setModel(model);
                
                String tmpName = this.jTextPlayer2Name.getText();
                this.jTextPlayer2Name.setText(this.jTextPlayer1Name.getText());
                this.jTextPlayer1Name.setText(tmpName);
                
                JOptionPane.showMessageDialog(null,
                    "Second player cannot be set when first is not, swapping!",
                    "Settings error",
                    JOptionPane.WARNING_MESSAGE);
            }
            
            this.gameWorker.settingsChanged();
        }
    }//GEN-LAST:event_jButtonSubmitPlayerSettingsActionPerformed

    /**
     * Player 1 selected - exclude selected player from other lists
     * @param evt 
     */
    private void jComboPlayer1NodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboPlayer1NodeActionPerformed
        // TODO add your handling code here:
        System.err.println("ActionCommand: " + evt.getActionCommand());
        this.refreshMobileNodes(2);
    }//GEN-LAST:event_jComboPlayer1NodeActionPerformed

    /**
     * Player 2 selected - exclude selected player from other lists
     * @param evt 
     */
    private void jComboPlayer2NodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboPlayer2NodeActionPerformed
        // TODO add your handling code here:
        System.err.println("ActionCommand: " + evt.getActionCommand());
        this.refreshMobileNodes(1);
    }//GEN-LAST:event_jComboPlayer2NodeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSubmitPlayerSettings;
    private javax.swing.JComboBox jComboPlayer1Node;
    private javax.swing.JComboBox jComboPlayer2Node;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextPlayer1Name;
    private javax.swing.JTextField jTextPlayer2Name;
    // End of variables declaration//GEN-END:variables
}
