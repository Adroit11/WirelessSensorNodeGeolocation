/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelNodeRegisterMain.java
 *
 * Created on May 4, 2011, 1:14:44 AM
 */
package rssi_graph.nodeRegister;

import java.io.File;
import java.io.FileNotFoundException;
import java.text.NumberFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.jfree.ui.ExtensionFileFilter;
import rssi_localization.JPannelLoggerLogElement;
import rssi_localization.MessageTypes;
import rssi_localization.RSSI_graphApp;

/**
 *
 * @author ph4r05
 */
public class JPanelNodeRegisterMain extends javax.swing.JPanel {

    /** Creates new form JPanelNodeRegisterMain */
    public JPanelNodeRegisterMain() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_AddNodePlatform = new javax.swing.ButtonGroup();
        buttonGroup_addNodeType = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jTextNewNodeId = new JFormattedTextField(NumberFormat.getIntegerInstance());
        jRadioAnchor = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioPlatform_telosb = new javax.swing.JRadioButton();
        jRadioPlatform_iris = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonLoadConfig = new javax.swing.JButton();
        jButtonSaveConfig = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(rssi_localization.RSSI_graphApp.class).getContext().getResourceMap(JPanelNodeRegisterMain.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jTextNewNodeId.setText(resourceMap.getString("jTextNewNodeId.text")); // NOI18N
        jTextNewNodeId.setName("jTextNewNodeId"); // NOI18N

        buttonGroup_addNodeType.add(jRadioAnchor);
        jRadioAnchor.setSelected(true);
        jRadioAnchor.setText(resourceMap.getString("jRadioAnchor.text")); // NOI18N
        jRadioAnchor.setName("jRadioAnchor"); // NOI18N

        buttonGroup_addNodeType.add(jRadioButton2);
        jRadioButton2.setText(resourceMap.getString("jRadioButton2.text")); // NOI18N
        jRadioButton2.setName("jRadioButton2"); // NOI18N

        buttonGroup_AddNodePlatform.add(jRadioPlatform_telosb);
        jRadioPlatform_telosb.setSelected(true);
        jRadioPlatform_telosb.setText(resourceMap.getString("jRadioPlatform_telosb.text")); // NOI18N
        jRadioPlatform_telosb.setName("jRadioPlatform_telosb"); // NOI18N

        buttonGroup_AddNodePlatform.add(jRadioPlatform_iris);
        jRadioPlatform_iris.setText(resourceMap.getString("jRadioPlatform_iris.text")); // NOI18N
        jRadioPlatform_iris.setName("jRadioPlatform_iris"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextNewNodeId, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioAnchor)
                            .addComponent(jRadioButton2)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioPlatform_iris)
                                    .addComponent(jRadioPlatform_telosb)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextNewNodeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioAnchor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioPlatform_telosb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioPlatform_iris)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        jButtonLoadConfig.setText(resourceMap.getString("jButtonLoadConfig.text")); // NOI18N
        jButtonLoadConfig.setToolTipText(resourceMap.getString("jButtonLoadConfig.toolTipText")); // NOI18N
        jButtonLoadConfig.setName("jButtonLoadConfig"); // NOI18N
        jButtonLoadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadConfigActionPerformed(evt);
            }
        });

        jButtonSaveConfig.setText(resourceMap.getString("jButtonSaveConfig.text")); // NOI18N
        jButtonSaveConfig.setToolTipText(resourceMap.getString("jButtonSaveConfig.toolTipText")); // NOI18N
        jButtonSaveConfig.setName("jButtonSaveConfig"); // NOI18N
        jButtonSaveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonLoadConfig)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jButtonSaveConfig)
                .addGap(20, 20, 20))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonLoadConfig, jButtonSaveConfig});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLoadConfig)
                    .addComponent(jButtonSaveConfig))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Add new node to node register
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            int newNode = Integer.parseInt(this.jTextNewNodeId.getText());
            RSSI_graphApp.sGetNodeRegister().discoveryPong(newNode, 
                    this.jRadioAnchor.isSelected() ? MessageTypes.NODE_STATIC : MessageTypes.NODE_DYNAMIC,
                    this.jRadioPlatform_telosb.isSelected() ? 1 : 2);
            RSSI_graphApp.sGetNodeRegister().logToTextarea("Discovery ping sent", JPannelLoggerLogElement.SEVERITY_INFO);

            // set focus
            this.jTextNewNodeId.grabFocus();
        } catch(Exception e){
            // log
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Delete specified node from register
     * 
     * @param evt
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            int node = Integer.parseInt(this.jTextNewNodeId.getText());
            boolean result = RSSI_graphApp.sGetNodeRegister().removeNode(node);
            if (result){
                this.jTextNewNodeId.setText("");
                RSSI_graphApp.sGetNodeRegister().logToTextarea("Node " +node+ " removed from register", JPannelLoggerLogElement.SEVERITY_INFO);

                // set focus
                this.jTextNewNodeId.grabFocus();
            } else {
                RSSI_graphApp.sGetNodeRegister().logToTextarea("Node " +node+ " removal problem", JPannelLoggerLogElement.SEVERITY_ERROR);
            }
        } catch(Exception e){
            // log
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Load node register configuration from config file
     * @param evt 
     */
    private void jButtonLoadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadConfigActionPerformed
        try {
            NodeRegister nodeRegister = RSSI_graphApp.sGetNodeRegister();
            if (nodeRegister==null){
                throw new NullPointerException("Node register is null, cannot continue.");
            }
            
            //Create a file chooser
            final JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fc.setMultiSelectionEnabled(false);
            
            // permit XML
            FileFilter filter1 = new ExtensionFileFilter("XML configuration", "xml");
            fc.addChoosableFileFilter(filter1);

            // In response to a button click:
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                
                if (file.exists()==false){
                    throw new FileNotFoundException("File not found");
                }
                
                // generate config object
                NodeRegisterConfiguration configFromXML = NodeRegisterConfigurationManager.getConfigFromXML(file.getAbsolutePath());
                if (configFromXML==null){
                    throw new IllegalArgumentException("Config object is empty");
                }
                
                int result = nodeRegister.restoreConfigFromObject(configFromXML);
                if (result!=0){
                    throw new Exception("Unexpected result from node register configuration manager");
                }
                
                if (this.isShowing()){
                    JOptionPane.showMessageDialog(this,
                        "Configuration loaded, please reset your running modules",
                        "Operation successfull",
                        JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                // cancel hit
            }
        } catch(FileNotFoundException e){
            Logger.getLogger(JPanelNodeRegisterMain.class.getName()).log(Level.SEVERE, null, e);
            
            // display message box
            if (this.isShowing()){
                JOptionPane.showMessageDialog(this,
                    "Cannot load configuration, file not found",
                    "Configuration error",
                    JOptionPane.ERROR_MESSAGE);
            }
        } catch(Exception e){
            Logger.getLogger(JPanelNodeRegisterMain.class.getName()).log(Level.SEVERE, null, e);
            
            // display message box
            if (this.isShowing()){
                JOptionPane.showMessageDialog(this,
                    "Cannot save configuration, error occurred. " + RSSI_graphApp.getLineSeparator()
                        + "Exception: " + e.getMessage(),
                    "Configuration error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonLoadConfigActionPerformed

    /**
     * Save node register configuration to config file
     * @param evt 
     */
    private void jButtonSaveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveConfigActionPerformed
        try {
            NodeRegister nodeRegister = RSSI_graphApp.sGetNodeRegister();
            if (nodeRegister==null){
                throw new NullPointerException("Node register is null, cannot continue.");
            }
            
            //Create a file chooser
            final JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fc.setMultiSelectionEnabled(false);
            
            // permit XML
            FileFilter filter1 = new ExtensionFileFilter("XML configuration", "xml");
            fc.addChoosableFileFilter(filter1);

            // In response to a button click:
            int returnVal = fc.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                // generate config object
                NodeRegisterConfiguration config = nodeRegister.storeConfigToObject(null);
                int result = NodeRegisterConfigurationManager.storeConfigToXML(file.getAbsolutePath(), config);
                
                if (result!=0){
                    throw new Exception("Unexpected result from node register configuration manager");
                }
                
                if (this.isShowing()){
                    JOptionPane.showMessageDialog(this,
                        "Configuration saved",
                        "Operation successfull",
                        JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                // cancel hit
            }
        }
        catch(Exception e){
            Logger.getLogger(JPanelNodeRegisterMain.class.getName()).log(Level.SEVERE, null, e);
            
            // display message box
            if (this.isShowing()){
                JOptionPane.showMessageDialog(this,
                    "Cannot save configuration, error occurred (Exception thrown)",
                    "Configuration error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonSaveConfigActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_AddNodePlatform;
    private javax.swing.ButtonGroup buttonGroup_addNodeType;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonLoadConfig;
    private javax.swing.JButton jButtonSaveConfig;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioAnchor;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioPlatform_iris;
    private javax.swing.JRadioButton jRadioPlatform_telosb;
    private javax.swing.JFormattedTextField jTextNewNodeId;
    // End of variables declaration//GEN-END:variables
}
